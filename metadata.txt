# file name: src/components/stock-actions/DateRangePicker.vue ------------------------------------------
<template>
  <div :class="cn('grid gap-2', $attrs.class as string)">
    <VDatePicker
      v-model.range="selectedDateRange"
      mode="date"
      :masks="{ modelValue: 'YYYY-MM-DD' }"
      :popover="{ visibility: 'click' }"
      is-range
      :locale="enUS"
    >
      <template #default="{ togglePopover }">
        <Button
          id="date"
          variant="outline"
          :class="cn(
            'w-full justify-start text-left font-normal',
            !date?.from && 'text-muted-foreground'
          )"
          @click="togglePopover"
        >
          <div class="flex items-center justify-between w-full">
            <div class="flex items-center">
              <CalendarIcon class="mr-2 h-4 w-4" />
              <span v-if="date?.from && date.to">
                {{ format(date.from, "LLL dd, y") }} - {{ format(date.to, "LLL dd, y") }}
              </span>
              <span v-else-if="date?.from">
                {{ format(date.from, "LLL dd, y") }}
              </span>
              <span v-else>Pick a date range</span>
            </div>

            <button
              v-if="date?.from"
              class="p-1 rounded-full hover:bg-secondary"
              @click.stop="clearDate"
            >
              <XIcon class="h-4 w-4 text-muted-foreground" />
            </button>
          </div>
        </Button>
      </template>
    </VDatePicker>
  </div>
</template>

<script setup lang="ts">
import { computed } from 'vue'
import { format } from 'date-fns'
import { enUS } from 'date-fns/locale'
import { Calendar as CalendarIcon, XIcon } from 'lucide-vue-next'
import { DatePicker as VDatePicker } from 'v-calendar'
import 'v-calendar/style.css'

import { cn } from '@/lib/utils'
import Button from '@/components/ui/Button.vue'

interface AppDateRange {
  from?: Date
  to?: Date
}


interface VCalendarDateRange {
  start: Date | null
  end: Date | null
}

interface Props {
  date?: AppDateRange
}
const props = defineProps<Props>()
const emit = defineEmits(['update:date'])

const clearDate = () => {
  emit('update:date', undefined);
};


const selectedDateRange = computed<VCalendarDateRange | null>({
  get: () => {
    if (!props.date || !props.date.from) {
      return null
    }
    return {
      start: props.date.from,
      end: props.date.to || null,
    }
  },
  set: (value) => {
    if (!value || !value.start) {
      emit('update:date', undefined);
      return;
    }

    emit('update:date', {
      from: value.start,
      to: value.end || undefined,
    });
  },
});
</script>

# file name: src/components/stock-actions/RankedStockCard.vue ------------------------------------------
<template>
    <div class="bg-card border rounded-lg p-4 shadow-sm transition-all duration-300 hover:shadow-md hover:-translate-y-1 cursor-pointer"
         @click="$emit('cardClick', stock)">
      <div class="flex items-center gap-4">
        <div class="flex flex-col items-center justify-center text-primary w-12">
          <TrophyIcon class="h-6 w-6 mb-1" />
          <span class="text-2xl font-bold leading-none">{{ stock.rank }}</span>
        </div>
  
        <Separator orientation="vertical" class="h-10" />
  
        <div class="flex-grow">
          <p class="font-semibold text-foreground truncate" :title="stock.company">
            {{ stock.company }}
          </p>
          <Badge variant="secondary" class="mt-1">{{ stock.ticker }}</Badge>
        </div>
      </div>
    </div>
  </template>
  
  <script setup lang="ts">
  import type { StockAction } from '@/types/stock-action';
  import Badge from '@/components/ui/Badge.vue';
  import Separator from '@/components/ui/Separator.vue';
  import { TrophyIcon } from 'lucide-vue-next';
  
  interface Props {
    stock: StockAction;
  }
  
  defineProps<Props>();
  defineEmits(['cardClick']);
  </script>

# file name: src/components/stock-actions/StockActionFilters.vue ------------------------------------------
<template>
  <div class="space-y-4">
    <div class="flex flex-col md:flex-row gap-4 items-center">

      <div class="relative w-full md:[flex-grow:5] min-w-0">
        <SearchIcon class="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-muted-foreground" />
        <Input
          type="text"
          placeholder="Search company or ticker..."
          :modelValue="searchTerm"
          @update:modelValue="$emit('update:searchTerm', $event)"
          class="pl-10 pr-4 py-2 w-full bg-secondary border-border"
        />
      </div>

      <Select
        :model-value="selectedAction"
        @update:modelValue="$emit('update:selectedAction', $event || '')"
        :options="actionTypeOptions"
        placeholder="Action Type"
        class="w-full md:[flex-grow:2] min-w-0"
      />
      
      <Select
        :model-value="selectedBrokerage"
        @update:modelValue="$emit('update:selectedBrokerage', $event || '')"
        :options="brokerageFirmOptions"
        placeholder="Brokerage"
        class="w-full md:[flex-grow:2] min-w-0"
      />

      <DateRangePicker 
        :date="dateRange" 
        @update:date="$emit('update:dateRange', $event)" 
        class="w-full md:[flex-grow:3] min-w-0" 
      />

      <Button
        v-if="hasActiveFilters"
        @click="$emit('clearFilters')"
        variant="ghost"
        size="sm"
        class="text-muted-foreground hover:text-foreground flex-shrink-0"
      >
        Clear Filters
      </Button>

    </div>
  </div>
</template>

<script setup lang="ts">
  import { computed } from 'vue'
  import Input from "@/components/ui/Input.vue"
  import Select from "@/components/ui/Select.vue";
  import DateRangePicker from "./DateRangePicker.vue"
  import Button from "@/components/ui/Button.vue"
  import { SearchIcon } from "lucide-vue-next"
  
  interface DateRange {
    from?: Date
    to?: Date
  }
  interface StockActionFiltersProps {
    searchTerm: string
    selectedAction: string
    selectedBrokerage: string
    dateRange?: DateRange
    actionTypes: string[]
    brokerageFirms: string[]
  }
  const props = defineProps<StockActionFiltersProps>()
  defineEmits([
    'update:searchTerm',
    'update:selectedAction',
    'update:selectedBrokerage',
    'update:dateRange',
    'clearFilters'
  ])

  const actionTypeOptions = computed(() => [
    { value: '', label: 'All Action Types' },
    ...props.actionTypes.map(action => ({ value: action, label: action }))
  ]);

  const brokerageFirmOptions = computed(() => [
    { value: '', label: 'All Brokerages' },
    ...props.brokerageFirms.map(brokerage => ({ value: brokerage, label: brokerage }))
  ]);

  const hasActiveFilters = computed(() => 
    props.searchTerm || props.selectedAction || props.selectedBrokerage || props.dateRange?.from
  )
</script>

# file name: src/components/stock-actions/StockActionsClient.vue ------------------------------------------
<template>
  <div class="container mx-auto py-10 px-4 md:px-0">
    <header class="mb-8">
      <h1 class="text-4xl font-bold text-foreground">Equity Pulse</h1>
    </header>

    <div class="space-y-8">
      <div>
        <h2 class="text-2xl font-semibold mb-4">Top Movers</h2>
        <TopRankedStocks 
          v-if="topRankedStocks.length > 0"
          :stocks="topRankedStocks"
          @stockSelect="handleRowClick"
        />
      </div>

      <div>
        <h2 class="text-2xl font-semibold mb-4">Quick Filters</h2>
        <StockActionFilters
          :search-term="searchTerm"
          @update:searchTerm="searchTerm = $event"
          :selected-action="selectedAction"
          @update:selectedAction="selectedAction = $event"
          :selected-brokerage="selectedBrokerage"
          @update:selectedBrokerage="selectedBrokerage = $event"
          :date-range="dateRange"
          @update:dateRange="dateRange = $event"
          :action-types="actionTypes"
          :brokerage-firms="brokerageFirms"
          @clearFilters="clearFilters"
        />
      </div>

      <div>
        <h2 class="text-2xl font-semibold mb-4">Ratings Grid</h2>
        <StockActionsTable
          :columns="columns"
          :data="filteredData"
          :on-row-click="handleRowClick"
        />
      </div>
    </div>

    <StockDetailModal
      :stock-action="selectedStockAction"
      :is-open="isModalOpen"
      @update:isOpen="isModalOpen = $event"
    />
  </div>
</template>

<script setup lang="ts">
  import { ref, computed } from 'vue'
  import type { StockAction } from "@/types/stock-action"
  import StockActionsTable from "./StockActionsTable.vue"
  import { columns } from "./columns"
  import StockActionFilters from "./StockActionFilters.vue"
  import StockDetailModal from "./StockDetailModal.vue"
  import TopRankedStocks from './TopRankedStocks.vue'

  interface DateRange {
    from?: Date
    to?: Date
  }
    
  interface StockActionsClientProps {
    initialData: StockAction[]
  }
  
  const props = defineProps<StockActionsClientProps>()
  
  const searchTerm = ref("")
  const selectedAction = ref("")
  const selectedBrokerage = ref("")
  const dateRange = ref<DateRange | undefined>(undefined)
    
  const selectedStockAction = ref<StockAction | null>(null)
  const isModalOpen = ref(false)

  const topRankedStocks = computed(() => {
    return [...props.initialData]
      .sort((a, b) => a.rank - b.rank)
      .slice(0, 5);
  });
  
  const actionTypes = computed(() => {
    const uniqueActions = new Set(props.initialData.map(item => item.action.toLowerCase()));
    return Array.from(uniqueActions).map(action => 
        action.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')
    );
  });
  
  const brokerageFirms = computed(() => 
    Array.from(new Set(props.initialData.map(item => item.brokerage))).sort()
  );
  
  const filteredData = computed(() => {
    let data = [...props.initialData]
  
    if (searchTerm.value) {
      const lowerSearchTerm = searchTerm.value.toLowerCase()
      data = data.filter(
        (item) =>
          item.company.toLowerCase().includes(lowerSearchTerm) ||
          item.ticker.toLowerCase().includes(lowerSearchTerm) ||
          item.brokerage.toLowerCase().includes(lowerSearchTerm)
      )
    }
  
    if (selectedAction.value) {
      data = data.filter(
        (item) => item.action.toLowerCase() === selectedAction.value.toLowerCase()
      )
    }
  
    if (selectedBrokerage.value) {
      data = data.filter(
        (item) => item.brokerage === selectedBrokerage.value
      )
    }
  
    if (dateRange.value?.from) {
      data = data.filter((item) => {
        const itemDate = new Date(item.time)
        itemDate.setHours(0,0,0,0); 
        
        let fromDate = new Date(dateRange.value!.from!);
        fromDate.setHours(0,0,0,0); 
  
        if (dateRange.value!.to) {
          let toDate = new Date(dateRange.value!.to!);
          toDate.setHours(23,59,59,999); 
          return itemDate >= fromDate && itemDate <= toDate;
        }
        return itemDate >= fromDate;
      })
    }
    return data
  })
  
  const handleRowClick = (stockActionItem: StockAction) => {
    selectedStockAction.value = stockActionItem
    isModalOpen.value = true
  }
  
  const clearFilters = () => {
    searchTerm.value = "";
    selectedAction.value = "";
    selectedBrokerage.value = "";
    dateRange.value = undefined;
  };
</script>

# file name: src/components/stock-actions/StockActionsTable.vue ------------------------------------------
<template>
  <div class="w-full">
    <div class="rounded-lg border border-border bg-card">
      <Table>
        <TableHeader>
          <TableRow class="border-b border-border hover:bg-transparent">
            <TableHead
              v-for="header in table.getHeaderGroups()[0].headers"
              :key="header.id"
              class="text-muted-foreground font-semibold uppercase text-xs tracking-wider"
            >
              <FlexRender :render="header.column.columnDef.header" :props="header.getContext()" />
            </TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          <template v-if="table.getRowModel().rows?.length">
            <TableRow
              v-for="row in table.getRowModel().rows"
              :key="row.id"
              @click="() => onRowClick(row.original as TData)"
              class="border-b border-border/50 hover:bg-secondary/50 cursor-pointer"
            >
              <TableCell v-for="cell in row.getVisibleCells()" :key="cell.id" class="py-3 px-4">
                <FlexRender :render="cell.column.columnDef.cell" :props="cell.getContext()" />
              </TableCell>
            </TableRow>
          </template>
          <template v-else>
            <TableRow>
              <TableCell :colSpan="columns.length" class="h-24 text-center">
                No results found.
              </TableCell>
            </TableRow>
          </template>
        </TableBody>
      </Table>
    </div>

    <div class="flex items-center justify-between space-x-2 py-4 mt-4">
      <span class="text-sm text-muted-foreground">
        Page {{ table.getState().pagination.pageIndex + 1 }} of {{ table.getPageCount() }}
      </span>
      <div class="flex items-center space-x-2">
        <Button 
            variant="outline" 
            size="sm" 
            @click="table.previousPage()" 
            :disabled="!table.getCanPreviousPage()"
        >
          Previous
        </Button>
        <Button 
            variant="outline" 
            size="sm" 
            @click="table.nextPage()" 
            :disabled="!table.getCanNextPage()"
        >
          Next
        </Button>
      </div>
    </div>
  </div>
</template>
  
<script setup lang="ts" generic="TData extends StockAction, TValue">
  import { ref, onMounted, onBeforeUnmount, toRefs } from 'vue'
  import type {
    ColumnDef,
    SortingState,
    VisibilityState,
    ColumnFiltersState,
  } from "@tanstack/vue-table"
  import {
    FlexRender,
    getCoreRowModel,
    getFilteredRowModel,
    getPaginationRowModel,
    getSortedRowModel,
    useVueTable,
  } from "@tanstack/vue-table"
  
  import Table from "@/components/ui/Table.vue"
  import TableBody from "@/components/ui/TableBody.vue"
  import TableCell from "@/components/ui/TableCell.vue"
  import TableHead from "@/components/ui/TableHead.vue"
  import TableHeader from "@/components/ui/TableHeader.vue"
  import TableRow from "@/components/ui/TableRow.vue"
  import Button from "@/components/ui/Button.vue"
  import type { StockAction } from "@/types/stock-action"
  
  interface DataTableProps {
    columns: ColumnDef<TData, TValue>[]
    data: TData[]
    onRowClick: (row: TData) => void
  }
  
  const props = defineProps<DataTableProps>()
  const { columns, data, onRowClick } = toRefs(props)
  
  const sorting = ref<SortingState>([])
  const columnFilters = ref<ColumnFiltersState>([])
  const columnVisibility = ref<VisibilityState>({
    'brokerage': false, 
    'ratingChange': false,
  })
    
  const table = useVueTable({
    get data() { return data.value },
    get columns() { return columns.value },
    state: {
      get sorting() { return sorting.value },
      get columnFilters() { return columnFilters.value },
      get columnVisibility() { return columnVisibility.value },
    },
    onSortingChange: (updater) => {
      sorting.value = typeof updater === 'function' ? updater(sorting.value) : updater
    },
    onColumnFiltersChange: (updater) => {
      columnFilters.value = typeof updater === 'function' ? updater(columnFilters.value) : updater
    },
    onColumnVisibilityChange: (updater) => {
      columnVisibility.value = typeof updater === 'function' ? updater(columnVisibility.value) : updater
    },
    getCoreRowModel: getCoreRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    initialState: {
      pagination: {
        pageSize: 10,
      },
    },
  })
  
  const handleResize = () => {
    if (typeof window !== 'undefined') {
      if (window.innerWidth < 768) { 
        table.setColumnVisibility({
          ...columnVisibility.value,
          'brokerage': false,
          'ratingChange': false,
          'time': false,
        });
      } else {
        table.setColumnVisibility({
          ...columnVisibility.value,
          'brokerage': true,
          'ratingChange': true,
          'time': true,
        });
      }
    }
  };
  
  onMounted(() => {
    if (typeof window !== 'undefined') {
      handleResize(); 
      window.addEventListener('resize', handleResize);
    }
  });
  
  onBeforeUnmount(() => {
    if (typeof window !== 'undefined') {
      window.removeEventListener('resize', handleResize);
    }
  });
</script>

# file name: src/components/stock-actions/StockDetailModal.vue ------------------------------------------
<template>
    <Sheet :open="isOpen" @update:open="$emit('update:isOpen', $event)" dialogClass="sm:max-w-lg w-[90vw]">
      <SheetContent v-if="stockAction">
        <SheetHeader class="mb-6">
          <SheetTitle class="text-2xl font-bold">
            {{ stockAction.company }} ({{ stockAction.ticker }})
          </SheetTitle>
          <SheetDescription>
            Action by {{ stockAction.brokerage }} on
            {{ format(new Date(stockAction.time), "MMMM dd, yyyy 'at' HH:mm") }}
          </SheetDescription>
        </SheetHeader>
  
        <div class="space-y-4 text-sm">
          <div>
            <h4 class="font-semibold text-muted-foreground">Action Type</h4>
            <p class="capitalize">{{ stockAction.action }}</p>
          </div>
          <Separator />
          <div>
            <h4 class="font-semibold text-muted-foreground">Rating Change</h4>
            <p>
              {{ stockAction.rating_from || "N/A" }} → {{ stockAction.rating_to }}
            </p>
          </div>
          <Separator />
          <div>
            <h4 class="font-semibold text-muted-foreground">Price Target Change</h4>
            <p :class="priceTargetColorClass">
              {{ formatPrice(targetFrom) }} → {{ formatPrice(targetTo) }}
            </p>
          </div>
          <Separator />
          <div>
            <h4 class="font-semibold text-muted-foreground">External Links</h4>
            <div class="space-y-1 mt-1">
              <Button variant="link" class="p-0 h-auto text-primary hover:underline" as-child>
                <a :href="`https://finance.yahoo.com/quote/${stockAction.ticker}`" target="_blank" rel="noopener noreferrer">
                  Yahoo Finance <ExternalLink class="ml-1 h-3 w-3 inline" />
                </a>
              </Button>
              <br />
              <Button variant="link" class="p-0 h-auto text-primary hover:underline" as-child>
                <a :href="`https://seekingalpha.com/symbol/${stockAction.ticker}`" target="_blank" rel="noopener noreferrer">
                  Seeking Alpha <ExternalLink class="ml-1 h-3 w-3 inline" />
                </a>
              </Button>
            </div>
          </div>
        </div>
        
        <SheetFooter class="mt-8">
          <Button @click="$emit('update:isOpen', false)" variant="outline">
            Close
          </Button>
        </SheetFooter>
      </SheetContent>
    </Sheet>
  </template>
  
  <script setup lang="ts">
  import { computed } from 'vue'
  import type { StockAction } from "@/types/stock-action"

  import Sheet from "@/components/ui/Sheet.vue"
  import SheetContent from "@/components/ui/SheetContent.vue"
  import SheetHeader from "@/components/ui/SheetHeader.vue"
  import SheetTitle from "@/components/ui/SheetTitle.vue"
  import SheetDescription from "@/components/ui/SheetDescription.vue"
  import SheetFooter from "@/components/ui/SheetFooter.vue"
  import Button from "@/components/ui/Button.vue"
  import Separator from "@/components/ui/Separator.vue"
  import { format } from "date-fns"
  import { ExternalLink } from "lucide-vue-next"
  import { formatPrice } from "@/lib/utils"
  
  interface StockDetailModalProps {
    stockAction: StockAction | null
    isOpen: boolean
  }
  
  const props = defineProps<StockDetailModalProps>()
  const emit = defineEmits(['update:isOpen'])
  
  const targetFrom = computed(() => props.stockAction ? props.stockAction.target_from : null)
  const targetTo = computed(() => props.stockAction ? props.stockAction.target_to : null)
  
  const priceTargetColorClass = computed(() => {
    if (!props.stockAction) return "text-foreground";
    
    const tf = targetFrom.value;
    const tt = targetTo.value;
  
    let colorClass = "text-foreground";
    if (tt !== null && tf !== null) {
      if (tt > tf) colorClass = "text-green-600 dark:text-green-500";
      else if (tt < tf) colorClass = "text-red-600 dark:text-red-500";
    } else if (tt !== null && tf === null && props.stockAction.action.toLowerCase().includes("initiated")) {
       colorClass = "text-green-600 dark:text-green-500";
    }
    return colorClass;
  })
  
  </script>

# file name: src/components/stock-actions/TopRankedStocks.vue ------------------------------------------
<template>
  <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-5 gap-4">
    <RankedStockCard 
      v-for="stock in stocks" 
      :key="stock.id"
      :stock="stock"
      @card-click="$emit('stockSelect', stock)"
    />
  </div>
</template>

<script setup lang="ts">
import type { StockAction } from '@/types/stock-action';
import RankedStockCard from './RankedStockCard.vue'; 

defineProps<{
  stocks: StockAction[]
}>();

defineEmits(['stockSelect']);
</script>

# file name: src/components/stock-actions/columns.ts ------------------------------------------
import { h } from 'vue'
import type { ColumnDef } from "@tanstack/vue-table"
import { format } from "date-fns"
import type { StockAction } from "@/types/stock-action"
import Badge from "@/components/ui/Badge.vue"
import { formatPrice } from '@/lib/utils'

export const columns: ColumnDef<StockAction>[] = [
  {
    accessorKey: "company",
    header: "Company",
    cell: ({ row }) => h('div', { class: 'font-medium' }, row.getValue("company")),
  },
  {
    accessorKey: "ticker",
    header: "Ticker",
    cell: ({ row }) => h(Badge, { variant: "secondary" }, () => row.getValue("ticker")),
  },
  {
    accessorKey: "brokerage",
    header: "Brokerage",
    cell: ({ row }) => h('div', {}, row.getValue("brokerage")),
  },
  {
    accessorKey: "action",
    header: "Rating",
    cell: ({ row }) => {

      const action = row.original.action.toLowerCase();
      
      let variant: 'default' | 'destructive' | 'outline' = 'outline'; 
      let text = 'Hold';

      if (action.includes('upgrade') || action.includes('initiated')) {
        variant = 'default'; 
        text = 'Buy';
      } else if (action.includes('downgrade')) {
        variant = 'destructive'; 
        text = 'Sell';
      }
      
      return h(Badge, { variant, class: 'capitalize px-3 py-1 text-xs' }, () => text)
    },
  },
  {
    accessorKey: "spot",
    header: "Price",
    cell: ({ row }) => h('div', { class: 'font-mono' }, formatPrice(row.getValue("spot"))),
  },
  {
    id: "change",
    header: "Change",
    cell: ({ row }) => {
        const from = row.original.target_from;
        const to = row.original.target_to;
        if (to === null || from === null) return h('span', { class: 'text-muted-foreground' }, 'N/A');
        
        const change = to - from;
        const isPositive = change >= 0;
        const colorClass = isPositive ? 'text-green-500' : 'text-red-500';
        const formattedChange = `${isPositive ? '+' : ''}${formatPrice(change)}`;
        
        return h('div', { class: `${colorClass} font-mono` }, formattedChange);
    }
  },
  {
    accessorKey: "time",
    header: "Date",
    cell: ({ row }) => {
      const date = new Date(row.getValue("time") as string);
      return h('div', { class: 'text-muted-foreground' }, format(date, "MMM dd, yyyy"));
    },
  },
]

# file name: src/components/ui/Badge.vue ------------------------------------------
<template>
    <div :class="badgeVariants({ variant, class: props.class })" v-bind="$attrs">
      <slot />
    </div>
  </template>
  <script setup lang="ts">
  import { cva, type VariantProps } from 'class-variance-authority'
  
  const badgeVariants = cva(
    "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
    {
      variants: {
        variant: {
          default: "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
          secondary: "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
          destructive: "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
          outline: "text-foreground",
        },
      },
      defaultVariants: {
        variant: "default",
      },
    }
  )
  type BadgeProps = VariantProps<typeof badgeVariants>
  interface Props {
    variant?: BadgeProps["variant"]
    class?: string
  }
  const props = withDefaults(defineProps<Props>(), {
    variant: 'default'
  })
  </script>

# file name: src/components/ui/Button.vue ------------------------------------------
<template>
    <button :class="buttonVariants({ variant, size, class: props.class })" v-bind="$attrs">
      <slot />
    </button>
  </template>
  
  <script setup lang="ts">
  import { cva, type VariantProps } from 'class-variance-authority'
  
  const buttonVariants = cva(
    "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
    {
      variants: {
        variant: {
          default: "bg-primary text-primary-foreground hover:bg-primary/90",
          destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
          outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
          secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
          ghost: "hover:bg-accent hover:text-accent-foreground",
          link: "text-primary underline-offset-4 hover:underline",
        },
        size: {
          default: "h-10 px-4 py-2",
          sm: "h-9 rounded-md px-3",
          lg: "h-11 rounded-md px-8",
          icon: "h-10 w-10",
        },
      },
      defaultVariants: {
        variant: "default",
        size: "default",
      },
    }
  )
  
  type ButtonProps = VariantProps<typeof buttonVariants>;
  
  interface Props {
    variant?: ButtonProps["variant"]
    size?: ButtonProps["size"]
    class?: string
  }
  
  const props = withDefaults(defineProps<Props>(), {
    variant: 'default',
    size: 'default',
  })
  </script>

# file name: src/components/ui/Input.vue ------------------------------------------
<template>
    <input
      :value="modelValue"
      @input="$emit('update:modelValue', ($event.target as HTMLInputElement).value)"
      :class="cn('flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50', props.class)"
      v_bind="$attrs"
    />
  </template>
  
  <script setup lang="ts">
  import { cn } from '@/lib/utils'
  
  interface Props {
    modelValue?: string | number
    class?: string
  }
  const props = defineProps<Props>()
  defineEmits(['update:modelValue'])
  </script>

# file name: src/components/ui/Select.vue ------------------------------------------
<template>
  <div class="relative w-full" ref="selectRef">
    <Button
      variant="secondary" 
      :class="cn(
        'w-full justify-between text-left font-normal border border-input', 
        !selectedLabel && 'text-muted-foreground',
        props.class
      )"
      @click="toggleDropdown"
      aria-haspopup="listbox"
      :aria-expanded="isOpen"
    >
      <span class="truncate">
        {{ selectedLabel || placeholder }}
      </span>
      <ChevronDownIcon class="ml-2 h-4 w-4 shrink-0 opacity-50" />
    </Button>

    <Transition name="fade-scale">
      <div
        v-if="isOpen"
        class="absolute z-50 mt-1 w-full rounded-md border bg-popover text-popover-foreground shadow-md"
      >
        <ul class="max-h-60 overflow-auto p-1" role="listbox">
          <li
            v-for="option in options"
            :key="option.value"
            :class="[
              'relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none hover:bg-accent/50',
              { 'bg-accent': modelValue === option.value }
            ]"
            role="option"
            :aria-selected="modelValue === option.value"
            @click="selectOption(option)"
          >
            <span class="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
              <CheckIcon v-if="modelValue === option.value" class="h-4 w-4" />
            </span>
            <span class="truncate">{{ option.label }}</span>
          </li>
          <li v-if="!options.length" class="px-2 py-1.5 text-sm text-muted-foreground">
            No options available.
          </li>
        </ul>
      </div>
    </Transition>
  </div>
</template>

<script setup lang="ts">
import { ref, computed, watch, onUnmounted, nextTick } from 'vue';
import { cn } from '@/lib/utils';
import Button from './Button.vue';
import { ChevronDownIcon, CheckIcon } from 'lucide-vue-next';
interface SelectOption {
  value: string | number;
  label: string;
}
const props = defineProps<{
  modelValue: string | number | undefined;
  options: SelectOption[];
  placeholder?: string;
  class?: string;
}>();
const emit = defineEmits(['update:modelValue']);
const isOpen = ref(false);
const selectRef = ref<HTMLElement | null>(null);
const selectedLabel = computed(() => {
  return props.options.find(opt => opt.value === props.modelValue)?.label;
});
const toggleDropdown = () => {
  isOpen.value = !isOpen.value;
};
const selectOption = (option: SelectOption) => {
  emit('update:modelValue', option.value);
  isOpen.value = false;
};
const handleClickOutside = (event: MouseEvent) => {
  if (selectRef.value && !selectRef.value.contains(event.target as Node)) {
    isOpen.value = false;
  }
};
watch(isOpen, (isCurrentlyOpen) => {
  if (isCurrentlyOpen) {
    nextTick(() => {
      document.addEventListener('click', handleClickOutside);
    });
  } else {
    document.removeEventListener('click', handleClickOutside);
  }
});
onUnmounted(() => {
  document.removeEventListener('click', handleClickOutside);
});
</script>
<style scoped>
.fade-scale-enter-active,
.fade-scale-leave-active {
  transition: opacity 0.1s ease-out, transform 0.1s ease-out;
}
.fade-scale-enter-from,
.fade-scale-leave-to {
  opacity: 0;
  transform: scale(0.95) translateY(-5px);
}
</style>

# file name: src/components/ui/Separator.vue ------------------------------------------
<template>
    <hr :class="cn('shrink-0 bg-border', orientation === 'horizontal' ? 'h-[1px] w-full' : 'h-full w-[1px]', props.class)" v_bind="$attrs" />
  </template>
  <script setup lang="ts">
  import { cn } from '@/lib/utils';
  interface Props {
    orientation?: 'horizontal' | 'vertical'
    class?: string
  }
  const props = withDefaults(defineProps<Props>(), {
    orientation: 'horizontal'
  })
  </script>

# file name: src/components/ui/Sheet.vue ------------------------------------------
<template>
    <Teleport to="body">
      <Transition name="fade">
        <div v-if="open" @click.self="handleOverlayClick" class="fixed inset-0 z-50 bg-black/50 flex items-center justify-center backdrop-blur-sm">
          <div :class="cn('bg-card shadow-lg rounded-lg m-4 relative', props.dialogClass)" v_bind="$attrs" role="dialog" aria-modal="true">
            <slot />
          </div>
        </div>
      </Transition>
    </Teleport>
  </template>
  <script setup lang="ts">
  import { cn } from '@/lib/utils';
  import { watch, onUnmounted } from 'vue';
  
  interface Props {
    open: boolean;
    dialogClass?: string; 
    persistent?: boolean; 
  }
  const props = defineProps<Props>();
  const emit = defineEmits(['update:open']);
  
  const handleOverlayClick = () => {
    if (!props.persistent) {
      emit('update:open', false);
    }
  }
  
  watch(() => props.open, (isOpen) => {
    if (typeof document !== 'undefined') {
      if (isOpen) {
        document.body.style.overflow = 'hidden';
      } else {
        document.body.style.overflow = '';
      }
    }
  }, { immediate: true });
  
  onUnmounted(() => {
    if (typeof document !== 'undefined') {
      document.body.style.overflow = '';
    }
  });
  </script>
  <style scoped>
  .fade-enter-active, .fade-leave-active {
    transition: opacity 0.2s ease-in-out;
  }
  .fade-enter-active .bg-card, .fade-leave-active .bg-card { /* Target inner dialog for scale/translate */
    transition: opacity 0.2s ease-in-out, transform 0.2s ease-in-out;
  }
  
  .fade-enter-from, .fade-leave-to {
    opacity: 0;
  }
  .fade-enter-from .bg-card, .fade-leave-to .bg-card {
    opacity: 0;
    transform: scale(0.95) translateY(10px);
  }
  </style>

# file name: src/components/ui/SheetContent.vue ------------------------------------------
<template>
    <div :class="cn('p-6', props.class)"> 
      <slot />
    </div>
  </template>
  <script setup lang="ts">
  import { cn } from '@/lib/utils';
  const props = defineProps<{ class?: string }>();
  </script>

# file name: src/components/ui/SheetDescription.vue ------------------------------------------
<template>
    <p :class="cn('text-sm text-muted-foreground', props.class)">
      <slot />
    </p>
  </template>
  <script setup lang="ts">
  import { cn } from '@/lib/utils';
  const props = defineProps<{ class?: string }>();
  </script>

# file name: src/components/ui/SheetFooter.vue ------------------------------------------
<template>
    <div :class="cn('flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2 mt-6', props.class)"> 
      <slot />
    </div>
  </template>
  <script setup lang="ts">
  import { cn } from '@/lib/utils';
  const props = defineProps<{ class?: string }>();
  </script>

# file name: src/components/ui/SheetHeader.vue ------------------------------------------
<template>
    <div :class="cn('flex flex-col space-y-2 text-center sm:text-left mb-4', props.class)"> 
      <slot />
    </div>
  </template>
  <script setup lang="ts">
  import { cn } from '@/lib/utils';
  const props = defineProps<{ class?: string }>();
  </script>

# file name: src/components/ui/SheetTitle.vue ------------------------------------------
<template>
    <h2 :class="cn('text-lg font-semibold text-foreground', props.class)"> 
      <slot />
    </h2>
  </template>
  <script setup lang="ts">
  import { cn } from '@/lib/utils';
  const props = defineProps<{ class?: string }>();
  </script>

# file name: src/components/ui/Table.vue ------------------------------------------
<template>
    <div class="relative w-full overflow-auto">
      <table :class="cn('w-full caption-bottom text-sm', props.class)" v_bind="$attrs">
        <slot />
      </table>
    </div>
  </template>
  <script setup lang="ts">
  import { cn } from '@/lib/utils';
  const props = defineProps<{ class?: string }>();
  </script>

# file name: src/components/ui/TableBody.vue ------------------------------------------
<template>
    <tbody :class="cn('[&_tr:last-child]:border-0', props.class)" v_bind="$attrs">
      <slot />
    </tbody>
  </template>
  <script setup lang="ts">
  import { cn } from '@/lib/utils';
  const props = defineProps<{ class?: string }>();
  </script>

# file name: src/components/ui/TableCell.vue ------------------------------------------
<template>
    <td :class="cn('p-4 align-middle [&:has([role=checkbox])]:pr-0', props.class)" v_bind="$attrs">
      <slot />
    </td>
  </template>
  <script setup lang="ts">
  import { cn } from '@/lib/utils';
  const props = defineProps<{ class?: string }>();
  </script>

# file name: src/components/ui/TableHead.vue ------------------------------------------
<template>
    <th :class="cn('h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0', props.class)" v_bind="$attrs">
      <slot />
    </th>
  </template>
  <script setup lang="ts">
  import { cn } from '@/lib/utils';
  const props = defineProps<{ class?: string }>();
  </script>

# file name: src/components/ui/TableHeader.vue ------------------------------------------
<template>
    <thead :class="cn('[&_tr]:border-b', props.class)" v_bind="$attrs">
      <slot />
    </thead>
  </template>
  <script setup lang="ts">
  import { cn } from '@/lib/utils';
  const props = defineProps<{ class?: string }>();
  </script>

# file name: src/components/ui/TableParts.vue ------------------------------------------
<template>
    <div class="relative w-full overflow-auto">
      <table :class="cn('w-full caption-bottom text-sm', props.class)" v_bind="$attrs">
        <slot />
      </table>
    </div>
  </template>
  <script setup lang="ts">
  import { cn } from '@/lib/utils';
  const props = defineProps<{ class?: string }>();
  </script>
  
  <template>
    <thead :class="cn('[&_tr]:border-b', props.class)" v_bind="$attrs">
      <slot />
    </thead>
  </template>
  <script setup lang="ts">
  import { cn } from '@/lib/utils';
  const props = defineProps<{ class?: string }>();
  </script>
  
  <template>
    <tbody :class="cn('[&_tr:last-child]:border-0', props.class)" v_bind="$attrs">
      <slot />
    </tbody>
  </template>
  <script setup lang="ts">
  import { cn } from '@/lib/utils';
  const props = defineProps<{ class?: string }>();
  </script>
  
  <template>
    <tr :class="cn('border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted', props.class)" v_bind="$attrs">
      <slot />
    </tr>
  </template>
  <script setup lang="ts">
  import { cn } from '@/lib/utils';
  const props = defineProps<{ class?: string }>();
  </script>
  
  <template>
    <th :class="cn('h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0', props.class)" v_bind="$attrs">
      <slot />
    </th>
  </template>
  <script setup lang="ts">
  import { cn } from '@/lib/utils';
  const props = defineProps<{ class?: string }>();
  </script>
  
  <template>
    <td :class="cn('p-4 align-middle [&:has([role=checkbox])]:pr-0', props.class)" v_bind="$attrs">
      <slot />
    </td>
  </template>
  <script setup lang="ts">
  import { cn } from '@/lib/utils';
  const props = defineProps<{ class?: string }>();
  </script>
  
  <template>
    <div :class="badgeVariants({ variant, class: props.class })" v_bind="$attrs">
      <slot />
    </div>
  </template>
  <script setup lang="ts">
  import { cva, type VariantProps } from 'class-variance-authority'
  import { cn } from '@/lib/utils'
  
  const badgeVariants = cva(
    "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
    {
      variants: {
        variant: {
          default: "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
          secondary: "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
          destructive: "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
          outline: "text-foreground",
        },
      },
      defaultVariants: {
        variant: "default",
      },
    }
  )
  type BadgeProps = VariantProps<typeof badgeVariants>
  interface Props {
    variant?: BadgeProps["variant"]
    class?: string
  }
  const props = withDefaults(defineProps<Props>(), {
    variant: 'default'
  })
  </script>
  
  <template>
    <hr :class="cn('shrink-0 bg-border', orientation === 'horizontal' ? 'h-[1px] w-full' : 'h-full w-[1px]', props.class)" v_bind="$attrs" />
  </template>
  <script setup lang="ts">
  import { cn } from '@/lib/utils';
  interface Props {
    orientation?: 'horizontal' | 'vertical'
    class?: string
  }
  const props = withDefaults(defineProps<Props>(), {
    orientation: 'horizontal'
  })
  </script>
  
  <template>
    <Teleport to="body">
      <Transition name="fade">
        <div v-if="open" @click.self="handleOverlayClick" class="fixed inset-0 z-50 bg-black/50 flex items-center justify-center">
          <div :class="cn('bg-card p-6 shadow-lg rounded-lg sm:max-w-lg w-[90vw] m-4', props.class)" v_bind="$attrs" role="dialog" aria-modal="true">
            <slot />
          </div>
        </div>
      </Transition>
    </Teleport>
  </template>
  <script setup lang="ts">
  import { cn } from '@/lib/utils';
  import { watch } from 'vue';
  
  interface Props {
    open: boolean;
    class?: string;
    persistent?: boolean; 
  }
  const props = defineProps<Props>();
  const emit = defineEmits(['update:open']);
  
  const handleOverlayClick = () => {
    if (!props.persistent) {
      emit('update:open', false);
    }
  }
  
  watch(() => props.open, (isOpen) => {
    if (isOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = '';
    }
  });
  import { onUnmounted } from 'vue';
  onUnmounted(() => {
    document.body.style.overflow = '';
  });
  </script>
  <style scoped>
  .fade-enter-active, .fade-leave-active {
    transition: opacity 0.3s ease;
  }
  .fade-enter-from, .fade-leave-to {
    opacity: 0;
  }
  </style>
  
  <template><div :class="props.class"><slot /></div></template>
  <script setup lang="ts">const props = defineProps<{ class?: string }>();</script>
  
  <template><div :class="cn('mb-6', props.class)"><slot /></div></template>
  <script setup lang="ts">import { cn } from '@/lib/utils'; const props = defineProps<{ class?: string }>();</script>
  
  <template><h2 :class="cn('text-2xl font-bold', props.class)"><slot /></h2></template>
  <script setup lang="ts">import { cn } from '@/lib/utils'; const props = defineProps<{ class?: string }>();</script>
  
  <template><p :class="cn('text-muted-foreground', props.class)"><slot /></p></template>
  <script setup lang="ts">import { cn } from '@/lib/utils'; const props = defineProps<{ class?: string }>();</script>
  
  <template><div :class="cn('mt-8 flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2', props.class)"><slot /></div></template>
  <script setup lang="ts">import { cn } from '@/lib/utils'; const props = defineProps<{ class?: string }>();</script>

# file name: src/components/ui/TableRow.vue ------------------------------------------
<template>
    <tr :class="cn('border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted', props.class)" v_bind="$attrs">
      <slot />
    </tr>
  </template>
  <script setup lang="ts">
  import { cn } from '@/lib/utils';
  const props = defineProps<{ class?: string }>();
  </script>

# file name: src/lib/utils.ts ------------------------------------------
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

export function formatPrice(price: number | null | undefined): string {
  if (price === null || price === undefined) return "N/A";
  return `$${price.toFixed(2)}`;
}

export function generateId(): string {
  return Math.random().toString(36).substr(2, 9);
}

# file name: src/main.ts ------------------------------------------
import { createApp } from 'vue'
import { createPinia } from 'pinia'
import { VueQueryPlugin } from "@tanstack/vue-query"
import App from './App.vue'
import router from './router'
import './assets/main.css' 
import { Toaster } from 'vue-sonner'

const app = createApp(App)

app.use(createPinia())
app.use(router)
app.use(VueQueryPlugin)

app.component('Toaster', Toaster)


app.mount('#app')

# file name: src/stores/stockStore.ts ------------------------------------------
import { defineStore } from 'pinia'
import { ref } from 'vue'
import type { StockAction } from '@/types/stock-action'
import { generateId } from '@/lib/utils'  

export const useStockStore = defineStore('stock', () => {
  const stockActions = ref<StockAction[]>([])
  const isLoading = ref(false)
  const error = ref<Error | null>(null)

  async function fetchStockActions() {
    isLoading.value = true
    error.value = null
    try {
      const res = await fetch("http://localhost:8080/stocks", {
        cache: "no-store", 
      });
      if (!res.ok) {
        throw new Error(`Error fetching /stocks: ${res.status}`);
      }
      const rawData: Omit<StockAction, "id">[] = await res.json();
      stockActions.value = rawData.map(item => ({
        ...item,
        id: generateId(),
      }));
    } catch (e) {
      error.value = e as Error
      console.error("Failed to fetch stock actions:", e)
    } finally {
      isLoading.value = false
    }
  }

  return {
    stockActions,
    isLoading,
    error,
    fetchStockActions,
  }
})

# file name: src/types/stock-action.ts ------------------------------------------
// src/types/stock-action.ts
export interface StockAction {
  id: string; 
  action: string;
  brokerage: string;
  company: string;
  rating_from: string | null;
  rating_to: string;
  target_from: number | null;
  target_to: number | null;   
  ticker: string;
  time: string; 
  last_updated: string; 
  rank: number;         
  score: number;        
  sentiment: number;    
  spot: number;         
  upside: number;       
}

# file name: src/views/HomePage.vue ------------------------------------------
<template>
  <main class="min-h-screen bg-background">
    <div v-if="stockStore.isLoading" class="container mx-auto py-6 text-center">Loading data...</div>
    <div v-else-if="stockStore.error" class="container mx-auto py-6 text-center text-red-500">
      Failed to load data: {{ stockStore.error.message }}
    </div>
    <StockActionsClient v-else :initial-data="stockStore.stockActions" />
  </main>
</template>

<script setup lang="ts">
import { onMounted } from 'vue'
import StockActionsClient from "@/components/stock-actions/StockActionsClient.vue"
import { useStockStore } from '@/stores/stockStore'

const stockStore = useStockStore()

onMounted(() => {
  if (stockStore.stockActions.length === 0) { 
    stockStore.fetchStockActions()
  }
})
</script>

# file name: package.json ------------------------------------------
{
  "name": "stock-action-insights",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vue-tsc -b && vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "@popperjs/core": "^2.11.8",
    "@tanstack/vue-query": "^5.76.2",
    "@tanstack/vue-table": "^8.21.3",
    "axios": "^1.9.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "dotenv": "^16.5.0",
    "headlessui": "^0.0.0",
    "lucide-vue-next": "^0.511.0",
    "pinia": "^3.0.2",
    "tailwind-merge": "^3.3.0",
    "tailwindcss-animate": "^1.0.7",
    "v-calendar": "^3.1.2",
    "vue": "^3.5.13",
    "vue-router": "^4.5.1",
    "vue-sonner": "^2.0.0",
    "zod": "^3.25.23"
  },
  "devDependencies": {
    "@types/node": "^22.15.21",
    "@typescript-eslint/eslint-plugin": "^8.32.1",
    "@typescript-eslint/parser": "^8.32.1",
    "@vitejs/plugin-vue": "^5.2.3",
    "@vue/eslint-config-typescript": "^14.5.0",
    "@vue/tsconfig": "^0.7.0",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.27.0",
    "eslint-plugin-vue": "^10.1.0",
    "postcss": "^8.5.3",
    "tailwindcss": "^3.4.17",
    "typescript": "~5.8.3",
    "vite": "^6.3.5",
    "vue-tsc": "^2.2.8"
  }
}


# file name: tailwind.config.js ------------------------------------------
/** @type {import('tailwindcss').Config} */
export default {
  darkMode: 'class', 
  content: [
    "./index.html",
    "./src/**/*.{vue,js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',

        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))',
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))',
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))',
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))',
        },
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))',
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      fontFamily: {
        sans: ['Arial', 'Helvetica', 'sans-serif'],
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
}

# file name: src/assets/main.css ------------------------------------------
/* src/assets/main.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  /* ====================================================================== */
  /* ==                 TEMA "EQUITY PULSE" (DARK MODE)                  == */
  /* ====================================================================== */
  :root {
    /* Paleta base de colores en formato HSL */
    --background: 212 35% 11%;      /* #0D1117 - Fondo principal casi negro */
    --foreground: 210 15% 83%;      /* #C9D1D9 - Texto principal blanco roto */

    --card: 212 18% 14%;            /* #161B22 - Fondo de tarjetas y tabla */
    --card-foreground: 210 15% 83%; /* #C9D1D9 - Texto en tarjetas */

    --popover: 212 18% 14%;         /* #161B22 - Fondo para popovers */
    --popover-foreground: 210 15% 83%; /* #C9D1D9 - Texto en popovers */

    /* Colores de Acciones y Acentos */
    --primary: 136 65% 33%;         /* #238636 - Verde para 'Buy' / acciones positivas */
    --primary-foreground: 210 20% 98%; /* Texto blanco para el botón primario */
    
    --destructive: 1 72% 52%;       /* #DA3633 - Rojo para 'Sell' / acciones destructivas */
    --destructive-foreground: 210 20% 98%; /* Texto blanco para el botón destructivo */

    --accent: 215 82% 53%;          /* #1F6FEB - Azul para la paginación y acentos */
    --accent-foreground: 210 20% 98%;   /* Texto blanco para acentos */
    
    /* Elementos Secundarios y de UI */
    --secondary: 212 13% 16%;      /* #21262D - Fondo para filtros, badges, hover */
    --secondary-foreground: 210 15% 83%; /* #C9D1D9 - Texto en elementos secundarios */
    
    --muted: 212 13% 16%;           /* #21262D - Similar a secondary */
    --muted-foreground: 213 9% 58%; /* #8B949E - Texto atenuado */

    /* Bordes y Anillos de Foco */
    --border: 212 13% 22%;          /* #30363D - Borde sutil para contenedores */
    --input: 212 13% 16%;           /* #21262D - Fondo para los campos de input */
    --ring: 212 100% 67%;           /* #58A6FF - Color de realce al hacer focus */
    
    /* Radio de borde para los componentes */
    --radius: 0.5rem;
  }

  /* No es necesario un bloque .dark porque el tema oscuro es el predeterminado.
     Si quisieras añadir un tema claro, lo definirías aquí, por ejemplo:
     .light { ... } 
  */
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground antialiased;
  }
}

